const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcrypt');

const prisma = new PrismaClient();

async function createAdminFromEnv() {
  try {
    const adminEmail = process.env.ADMIN_EMAIL;
    const adminPassword = process.env.ADMIN_PASSWORD;
    const adminName = process.env.ADMIN_NAME || 'Admin Kullanƒ±cƒ±';
    
    if (!adminEmail || !adminPassword) {
      console.log('‚ùå ADMIN_EMAIL ve ADMIN_PASSWORD environment variable\'larƒ± gereklidir!');
      console.log('\nKullanƒ±m:');
      console.log('ADMIN_EMAIL=admin@example.com ADMIN_PASSWORD=g√º√ßl√º≈üifre123 node scripts/create-admin-env.js');
      process.exit(1);
    }
    
    if (adminPassword.length < 8) {
      console.log('‚ùå Admin ≈üifresi en az 8 karakter olmalƒ±dƒ±r!');
      process.exit(1);
    }
    
    console.log('üîÑ Admin kullanƒ±cƒ±sƒ± olu≈üturuluyor...');
    
    // √ñnce admin var mƒ± kontrol et
    const existingAdmin = await prisma.user.findUnique({
      where: { email: adminEmail }
    });
    
    const passwordHash = await bcrypt.hash(adminPassword, 12);
    
    if (existingAdmin) {
      console.log('‚ö†Ô∏è  Admin kullanƒ±cƒ±sƒ± zaten var, g√ºncelleniyor...');
      
      const updatedAdmin = await prisma.user.update({
        where: { email: adminEmail },
        data: {
          passwordHash: passwordHash,
          role: 'ADMIN',
          emailVerifiedAt: new Date(),
          name: adminName
        }
      });
      
      console.log('‚úÖ Admin kullanƒ±cƒ±sƒ± g√ºncellendi');
    } else {
      const newAdmin = await prisma.user.create({
        data: {
          email: adminEmail,
          name: adminName,
          passwordHash: passwordHash,
          role: 'ADMIN',
          emailVerifiedAt: new Date()
        }
      });
      
      console.log('‚úÖ Yeni admin kullanƒ±cƒ±sƒ± olu≈üturuldu');
    }
    
    console.log('\nüéâ Admin ba≈üarƒ±yla olu≈üturuldu!');
    console.log(`üìß Email: ${adminEmail}`);
    console.log('üîë ≈ûifre: [gizli]');
    console.log('üëë Rol: ADMIN');
    
  } catch (error) {
    console.error('‚ùå Hata:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

createAdminFromEnv();
